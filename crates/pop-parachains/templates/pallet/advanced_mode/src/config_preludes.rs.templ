{{- let using_runtime_event = pallet_common_types|contains(TemplatePalletConfigCommonTypes::RuntimeEvent) -}}
{{- let using_runtime_origin = pallet_common_types|contains(TemplatePalletConfigCommonTypes::RuntimeOrigin) -}}
{{- let using_currency = pallet_common_types|contains(TemplatePalletConfigCommonTypes::Currency) -}}
use super::*;
use frame::runtime::prelude::derive_impl;
use pop_dev::{PlaceholderType, pop_todo};

/// Provides a viable default config that can be used with
/// [`derive_impl`] to derive a testing pallet config
/// based on this one.
pub struct TestDefaultConfig;

#[derive_impl(frame_system::config_preludes::TestDefaultConfig, no_aggregated_types)]
impl frame::deps::frame_system::DefaultConfig for TestDefaultConfig {}

#[register_default_impl(TestDefaultConfig)]
impl DefaultConfig for TestDefaultConfig {
    {{- if using_runtime_event -}}
    #[inject_runtime_type]
    type RuntimeEvent = ();
    {{- endif -}}
    {{- if using_runtime_origin -}}
    #[inject_runtime_type]
    type RuntimeOrigin = ();
    {{- endif -}}
    {{- if using_currency -}}
    #[inject_runtime_type]
    type RuntimeHoldReason = ();
    #[inject_runtime_type]
    type RuntimeFreezeReason = ();
    {{- endif -}}
    {{- for config_type in pallet_config_types -}}
    {{- match config_type.1 -}}
    {{- when TemplatePalletConfigTypesDefault::Default }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- when TemplatePalletConfigTypesDefault::NoDefaultBounds }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- else -}}
    {{- endmatch -}}
    {{- endfor }}
}

/// Default configurations of this pallet in a solochain environment.
pub struct SolochainDefaultConfig;

#[derive_impl(frame_system::config_preludes::SolochainDefaultConfig, no_aggregated_types)]
impl frame::deps::frame_system::DefaultConfig for SolochainDefaultConfig {}

#[register_default_impl(SolochainDefaultConfig)]
impl DefaultConfig for SolochainDefaultConfig {
    {{- if using_runtime_event -}}
    #[inject_runtime_type]
    type RuntimeEvent = ();
    {{- endif -}}
    {{- if using_runtime_origin -}}
    #[inject_runtime_type]
    type RuntimeOrigin = ();
    {{- endif -}}
    {{- if using_currency -}}
    #[inject_runtime_type]
    type RuntimeHoldReason = ();
    #[inject_runtime_type]
    type RuntimeFreezeReason = ();
    {{- endif -}}
    {{- for config_type in pallet_config_types -}}
    {{- match config_type.1 -}}
    {{- when TemplatePalletConfigTypesDefault::Default }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- when TemplatePalletConfigTypesDefault::NoDefaultBounds }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- else -}}
    {{- endmatch -}}
    {{- endfor }}
}

/// Default configurations of this pallet in a solochain environment.
pub struct RelayChainDefaultConfig;

#[derive_impl(frame_system::config_preludes::RelayChainDefaultConfig, no_aggregated_types)]
impl frame::deps::frame_system::DefaultConfig for RelayChainDefaultConfig {}

#[register_default_impl(RelayChainDefaultConfig)]
impl DefaultConfig for RelayChainDefaultConfig {
    {{- if using_runtime_event -}}
    #[inject_runtime_type]
    type RuntimeEvent = ();
    {{- endif -}}
    {{- if using_runtime_origin -}}
    #[inject_runtime_type]
    type RuntimeOrigin = ();
    {{- endif -}}
    {{- if using_currency -}}
    #[inject_runtime_type]
    type RuntimeHoldReason = ();
    #[inject_runtime_type]
    type RuntimeFreezeReason = ();
    {{- endif -}}
    {{- for config_type in pallet_config_types -}}
    {{- match config_type.1 -}}
    {{- when TemplatePalletConfigTypesDefault::Default }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- when TemplatePalletConfigTypesDefault::NoDefaultBounds }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- else -}}
    {{- endmatch -}}
    {{- endfor }}
} 

/// Default configurations of this pallet in a solochain environment.
pub struct ParaChainDefaultConfig;

#[derive_impl(frame_system::config_preludes::ParaChainDefaultConfig, no_aggregated_types)]
impl frame::deps::frame_system::DefaultConfig for ParaChainDefaultConfig {}

#[register_default_impl(ParaChainDefaultConfig)]
impl DefaultConfig for ParaChainDefaultConfig{
    {{- if using_runtime_event -}}
    #[inject_runtime_type]
    type RuntimeEvent = ();
    {{- endif -}}
    {{- if using_runtime_origin -}}
    #[inject_runtime_type]
    type RuntimeOrigin = ();
    {{- endif -}}
    {{- if using_currency -}}
    #[inject_runtime_type]
    type RuntimeHoldReason = ();
    #[inject_runtime_type]
    type RuntimeFreezeReason = ();
    {{- endif -}}
    {{- for config_type in pallet_config_types -}}
    {{- match config_type.1 -}}
    {{- when TemplatePalletConfigTypesDefault::Default }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- when TemplatePalletConfigTypesDefault::NoDefaultBounds }}
    {{- match config_type.0 -}}
    {{- when TemplatePalletConfigTypesMetadata::Constant }}
    type ^^config_type.2|capitalize^^ = pop_todo!(constant_default_type);
    {{- else }}
    type ^^config_type.2|capitalize^^ = PlaceholderType;
    {{- endmatch -}}
    {{- else -}}
    {{- endmatch -}}
    {{- endfor }}
}