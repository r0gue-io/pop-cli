name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

env:
  CARGO_TERM_COLOR: always
  GITHUB_ACTOR: pop-cli
  CARGO_INCREMENTAL: 0

concurrency:
  # Cancel any in-progress jobs for the same pull request
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt
          override: true

      - name: Check formatting
        run: cargo +nightly fmt --all -- --check

  build:
    runs-on: ${{ runner.os }}
    env:
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Check no default features
        run: cargo check --no-default-features

      - name: Check contracts feature
        run: cargo check --no-default-features --features contract

      - name: Check polkavm-contracts feature
        run: cargo check --no-default-features --features "polkavm-contracts, v6" -p pop-cli -p pop-contracts

      - name: Check chain feature
        run: cargo check --no-default-features --features chain

      - name: Build default features
        run: cargo build

  clippy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTFLAGS: "-Wmissing_docs"
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Annotate with Clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check
          arguments: '--no-default-features'

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/build-push-action@v5

  docs:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
    env:
      RUSTDOCFLAGS: "-Dwarnings"
      RUSTFLAGS: "-Dmissing_docs"
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Check no default features
        run: cargo doc --no-deps

  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run unit tests (no default features)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo nextest run --lib --bins --no-default-features

      - name: Run unit tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo nextest run --lib --bins --no-default-features --features "contract,chain"

  polkavm-unit-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run unit tests for polkavm-contracts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo nextest run --lib --bins --no-default-features --features "polkavm-contracts, v6" -p pop-cli -p pop-contracts

  coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lib --bins --no-default-features --features "default experimental chain telemetry v5 wasm-contracts wallet-integration" --codecov --output-path codecov.json

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true

  documentation-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Run doc tests
        run: cargo test --doc

  contract-integration-tests:
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install protobuf
          fi
          protoc --version

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run integration tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo nextest run --no-default-features --features contract --test contract

  chain-integration-tests:
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy

      - name: Install packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: "./.github/actions/init"
        with:
          git-user: ${{ env.GITHUB_ACTOR }}

      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf
          protoc --version

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run integration tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cargo nextest run --no-default-features --features chain --test chain
          cargo nextest run --no-default-features --features chain --test metadata
